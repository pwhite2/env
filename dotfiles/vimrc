call pathogen#infect()

" runtime bundles/checksyntax_vim/macros/tplugin.vim
filetype plugin indent on
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org
au BufNewFile,BufRead *.template set filetype=json
au BufEnter *.org            call org#SetOrgFileType()
" Enable mouse navigation to make nerdtree more usable
" set mouse=a
set incsearch
set encoding=utf-8
set ruler
set nocompatible
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set textwidth=120
set background=dark
set hlsearch
set nu
set hidden
set scrolloff=5
set cursorline
set laststatus=2
set statusline=%f\ Buffer=%n\ %m\ %h\ %r\ %=Filetype=%y\ Dec=%b\ Hex=%B\ %{MyOct()}\ Line=%l\ Col=%c\ %P
"set statusline+=row:\ %r, col:\ %c, Dec=%b\ Hex=%B\ Oct=%O
" set visualbell

" For us traditional ctrl-] ctrl-t TAGS guys..., though TListToggle
" comes in handy too, and is added later. Maintained with the 'rtags' shell
" function.
set tags=./TAGS,./TAGS.uncommon,./tags,$HOME/TAGS,$HOME/TAGS.uncommon
set wildmode=longest:full
set wildmenu
set modelines=4
" Show tabs as odd character, same with trailing spaces or tabs.
" FIXME: UNCOMMENT
" set list lcs=tab:·⁖,trail:¶
:syntax enable
:retab
" nnoremap <f3> :set nolist lcs=tab:·⁖,notrail:¶<CR>
" noremap <F3> :set notrail:¶<CR>

:colorscheme desert
:highlight Pmenu ctermbg=238 gui=bold
" :let ruby_fold = 1
let mapleader=","
noremap \ ,
":syntax enable
":retab
" :map y Y$
" :map c C$
" :map p gP$
"
:map <Leader>n <plug>NERDTreeTabsToggle<CR>
:map <Leader>te tabedit<CR>

autocmd vimenter * if !argc() | NERDTree | endif
" :%s/\s\+$// -- remove trailing whitespace
" autocmd BufWritePre *.json :%s/\s\+$//e " strip trailing whitespace on save
" autocmd BufWritePost *.rb :CheckSyntax

" let g:nerdtree_tabs_open_on_console_startup=1
" let g:nerdtree_tabs_autoclose
set pastetoggle=<F2>

function MyOct()
  return printf("Oct=%03o",char2nr(matchstr(getline("."),'.',col(".")-1)))
endfunction

" Tab headings
function GuiTabLabel()
    let label = ''
    let bufnrlist = tabpagebuflist(v:lnum)

    " Add '+' if one of the buffers in the tab page is modified
    for bufnr in bufnrlist
        if getbufvar(bufnr, "&modified")
            let label = '+'
            break
        endif
    endfor

    " Append the number of windows in the tab page if more than one
    let wincount = tabpagewinnr(v:lnum, '$')
    if wincount > 1
        let label .= wincount
    endif
    if label != ''
        let label .= ' '
    endif

    " Append the buffer name (not full path)
    return label . "%t"
endfunction

set guitablabel=%!GuiTabLabel()

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
" nnoremap <f5> :!ctags -R --exclude=.git --languages=Ruby<CR>
syntax on
